@using dn32.infra.Nucleo.Models
@using dn32.infra.Nucleo.Doc.Controllers
@using dn32.infra.Nucleo.Extensoes
@using dn32.infra
@using System.Reflection;
@using dn32.infra.atributos
@using dn32.infra.enumeradores
@using dn32.infra.extensoes
@using dn32.infra.nucleo.atributos
@using dn32.infra.nucleo.modelos;

@using static dn32.infra.DnDocExtension
@using static dn32.infra.Nucleo.Extensoes.JsonExtension
@using dn32.infra.nucleo.interfaces;

@model DnJsonSchema

@{
    ViewData["Title"] = Model.Formulario.Nome;
    var actions = ViewBag.actions as List<DnActionSchema> ?? throw new InvalidOperationException("actions is not  Listar<DnActionSchema>");

    string GetTypeName(Type type, string name)
    {
        if (type.GetListTypeNonNull().IsDnEntity())
        {
            return $"<a href=\"/dndoc/modelo?Nome={type.GetListTypeNonNull().FullName}\">{type.GetFriendlyName(false)}</a>";
        }
        else
        {
            return $"{name}: {type.GetFriendlyName(false)}";
        }
    }
}
<script>
    function navegate(url) {
        window.location.href = url;
    }
</script>
<div class="one-service-container">
    <h4 class="general-title">@Model.Formulario?.Nome (@actions.Count) </h4>

    <h6 style="text-align:center;">@Model.Formulario.Descricao</h6>

    @{
        string Is(bool operation, string text)
        {
            return operation ? text : "";
        }

        <div class="actions-container">

            @foreach (var action in actions)
            {
                if (action == null) { continue; }
                //var parameters = action.Parameters?.Select(x => GetTypeName(x.Tipo, x.Name)).ToArray() ?? new string[] { };
                //var paramString = string.Join(", ", parameters);
                var actionName = action?.MethodName ?? "";

                <div class="action" onclick="navegate('/dndoc/acao?servico=@Model.Formulario.Tipo.GetListTypeNonNull().Name&nomeDaAcao=@actionName')">
                    <span class="method @action.Method.ToLower()">@action.Method</span>
                    <span class="name">@action.Name.G()</span>
                    <span class="Descricaoription">@action.Description</span>
                    @if (@action.Method == "GET")
                    {
                        <span class="route"><a href="@(action.ApiBaseUrl + action.Route)">@action.Route</a></span>
                    }
                    else
                    {
                        <span class="route">@action.Route</span>
                    }

                    <span style="color:red">
                        @Html.Raw(Is(!string.IsNullOrEmpty(action.Desabilitado), "<span style='white-space: nowrap;'><img src='/DnDoc/img/no.png'/>  " + action.Desabilitado + "</a></span>"))
                    </span>

                    @*@if (!string.EhNuloOrWhiteSpace(paramString))
                        {
                            <span class="parameters">@(("params").G()): @Html.Raw(paramString)</span>
                        }*@

                </div>
            }

        </div>

        <div class="properties-container">
            <span class="title">@Model.Formulario?.Nome @(("Propriedades").G())</span>
            <table class="properties">
                <thead>
                    <tr>
                        <th>@(("Propriedade").G())</th>
                        <th>@(("Name").G())</th>
                        <th>@(("Tipo").G())</th>
                        <th>@(("Others").G())</th>
                    </tr>
                </thead>
                @foreach (var property in Model.Propriedades)
                {
                    if (property.Formulario == EnumTipoDeComponenteDeFormularioDeTela.Nenhum) { continue; }
                    if (property.Propriedade.GetCustomAttribute<DnDocAtributo>()?.Apresentacao == EnumApresentar.Ocultar) { continue; }

                    var range = (property.Minimo == property.Maximo ? property.Minimo.ToString() : property.Minimo + ", " + property.Maximo);
                    range = range == "0" ? "" : $" ({range})";

                    <tr class="property">
                        <td class="name">@property.NomeDaPropriedade</td>
                        <td class="Descricaoription">@property.Nome</td>
                        <td class="tipo">@Html.Raw(GetTypeName(property.Tipo, property.Tipo.Name))@range</td>
                        <td>
                            @Html.Raw(Is(property.EhEnumerador, "<span><img src='/DnDoc/img/ok.png'/> " + "enum".G() + "</span>"))
                            @Html.Raw(Is(property.EhChave || property.EhDnChaveUnica, "<span><img src='/DnDoc/img/ok.png'/> " + "key".G() + "</span>"))
                            @Html.Raw(Is(property.EhLista, "<span><img src='/DnDoc/img/ok.png'/> " + "list".G() + "</span>"))
                            @Html.Raw(Is(property.PermiteNulo, "<span><img src='/DnDoc/img/ok.png'/> " + "nullable".G() + "</span>"))
                            @Html.Raw(Is(property.EhRequerido, "<span><img src='/DnDoc/img/ok.png'/> " + "EhRequerido".G() + "</span>"))
                            @Html.Raw(Is(property.EhChaveExterna, "<span><img src='/DnDoc/img/ok.png'/>  " + "fk".G() + " <a href=\"/DnDoc/Servico?Nome=" + property.DestinoDeChaveExterna?.Tipo?.Name + "\">" + property.DestinoDeChaveExterna?.Nome + "</a></span>"))
                            @Html.Raw(Is(!string.IsNullOrEmpty(property.Desabilitado), "<span style='white-space: nowrap;'><img src='/DnDoc/img/no.png'/>  " + property.Desabilitado + "</a></span>"))
                        </td>
                    </tr>
                }
            </table>
            <div class="example-valor-container">
                <span>@("Example valor".G())</span>

                @{
                    var exampleValue = Model.Formulario?.Tipo?.GetExampleValue() ?? "";

                    var json = exampleValue.SerializarParaDnJson(Newtonsoft.Json.Formatting.Indented);

                    <pre class="example-value">@json</pre>
                }
            </div>
        </div>
    }
</div>
